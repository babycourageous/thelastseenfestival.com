/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,optgroup,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}body{background-image:-webkit-linear-gradient(pink 1px,transparent 0);background-image:linear-gradient(pink 1px,transparent 0);background-size:100% 1.5em;background-position-y:0}.about{padding-top:3rem;padding-bottom:3rem}.about,.nav__container{max-width:64em;margin-left:auto;margin-right:auto;padding-left:.625em;padding-right:.625em}.about:before,.nav__container:before{content:'';display:table}.about:after,.nav__container:after{content:'';display:table;clear:both}img{display:block;width:100%;height:15rem}.location__map{width:100%;height:30rem}ul{list-style:none}li,ul{margin:0;padding:0}button{border:none;padding:0}.icon{display:block}.icon__hamburger{position:absolute;top:15.5px;left:10px;right:10px;height:2px;background:#ffc107;border-radius:4px}.icon__hamburger:after,.icon__hamburger:before{position:absolute;display:block;left:0;width:100%;height:2px;background-color:#ffc107;content:"";border-radius:4px}.icon__hamburger:before{top:-7px}.icon__hamburger:after{bottom:-7px}.icon__hamburger--htx{-webkit-transition:background 0s .3s;transition:background 0s .3s}.icon__hamburger--htx:before{-webkit-transition:top .3s .3s,-webkit-transform .3s 0s;transition:top .3s .3s,-webkit-transform .3s 0s;transition:top .3s .3s,transform .3s 0s;transition:top .3s .3s,transform .3s 0s,-webkit-transform .3s 0s}.icon__hamburger--htx:after{-webkit-transition:bottom .3s .3s,-webkit-transform .3s 0s;transition:bottom .3s .3s,-webkit-transform .3s 0s;transition:bottom .3s .3s,transform .3s 0s;transition:bottom .3s .3s,transform .3s 0s,-webkit-transform .3s 0s}.nav__toggle.is-active .icon__hamburger--htx{background:none}.nav__toggle.is-active .icon__hamburger--htx:before{top:0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.nav__toggle.is-active .icon__hamburger--htx:after{bottom:0;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.nav__toggle.is-active .icon__hamburger--htx:before{-webkit-transition:top .3s 0s,-webkit-transform .3s .3s;transition:top .3s 0s,-webkit-transform .3s .3s;transition:top .3s 0s,transform .3s .3s;transition:top .3s 0s,transform .3s .3s,-webkit-transform .3s .3s}.nav__toggle.is-active .icon__hamburger--htx:after{-webkit-transition:bottom .3s 0s,-webkit-transform .3s .3s;transition:bottom .3s 0s,-webkit-transform .3s .3s;transition:bottom .3s 0s,transform .3s .3s;transition:bottom .3s 0s,transform .3s .3s,-webkit-transform .3s .3s}html{font-family:Quattrocento,serif}h1,h2,h3,h4,h5,h6,p{margin:0;padding:0}h1,h2,h3,h4,h5,h6{font-family:Alegreya,serif}html{font-size:100%;line-height:1.5}@media (min-width:37.5em){html{font-size:112.5%}}@media (min-width:48.4375em){html{font-size:112.5%}}@media (min-width:56.875em){html{font-size:125%}}@media (min-width:70.3125em){html{font-size:125%}}h1{font-size:3.16049rem;margin-bottom:1.5rem}h1,h2{line-height:3rem}h2{font-size:2.37037rem}h3{font-size:1.77778rem;line-height:3rem;font-family:Quattrocento,serif}h4{font-size:1.33333rem;line-height:1.5rem}p{margin-bottom:1.5rem}.header{width:100%;min-height:3rem;background-color:rgba(0,0,0,.6);position:fixed;top:0;left:0;padding:50px 0}.nav{display:none}@media (min-width:48.4375em){.nav{display:block}}.nav__toggle{display:block;position:relative;padding:0;margin:8px 0;font-size:0;text-indent:-9999px;-webkit-appearance:none;-moz-appearance:none;appearance:none;box-shadow:none;border-radius:4px;border:1px solid transparent;cursor:pointer;background:#fff;height:35px;width:45px}.nav__toggle:focus,.nav__toggle:hover{outline:none}@media (min-width:48.4375em){.nav__toggle{display:none}}@media (min-width:48.4375em){.nav__list{float:right}}.nav__item{display:block}@media (min-width:48.4375em){.nav__item{display:inline-block}}.nav__link{display:block;line-height:1.5rem;padding:.75rem;text-decoration:none;text-transform:uppercase;color:#fff}.hero{width:100%;height:40.625em;background:#87cefa;display:table}.hero__container{display:table-cell;vertical-align:middle;text-align:center}.hero__countdown span{display:inline-block}.about{text-align:center}@media (min-width:48.4375em){.about__blurb{width:calc(99.9% * 6/8 - 7.5px);position:relative;left:calc(99.9% * 1/8 - 26.25px + 30px)}.about__blurb:nth-child(1n){float:left;margin-right:30px;clear:none}.about__blurb:last-child{margin-right:0}.about__blurb:nth-child(8n){margin-right:0;float:right}.about__blurb:nth-child(8n+1){clear:both}}@media (min-width:70.3125em){.about__blurb{width:calc(99.9% * 4/8 - 15px);position:relative;left:calc(99.9% * 2/8 - 22.5px + 30px)}.about__blurb:nth-child(1n){float:left;margin-right:30px;clear:none}.about__blurb:last-child{margin-right:0}.about__blurb:nth-child(8n){margin-right:0;float:right}.about__blurb:nth-child(8n+1){clear:both}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
